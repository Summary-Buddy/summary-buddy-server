plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.diffplug.spotless' version '6.25.0'
}

group = 'summarybuddy'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// JWT API
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5' // JSON 파싱을 위해 Jackson 사용 시

	// Google speech to text
	implementation 'com.google.cloud:google-cloud-speech:4.43.0'

	// Google Cloud Storage
	implementation platform('com.google.cloud:libraries-bom:  26.48.0-SNAPSHOT')
	implementation 'com.google.cloud:google-cloud-storage:2.43.0'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

def querydslDir = 'src/main/generated'

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslDir)
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', querydslDir]
		}
	}
}

clean {
	delete file(querydslDir)
}

spotless {
	java {
		targetExclude 'src/main/generated/**/*.java'
		importOrder()
		removeUnusedImports()
		googleJavaFormat().aosp()

		trimTrailingWhitespace()
		endWithNewline()
	}
}

tasks.named("spotlessJava") {
	mustRunAfter tasks.named("compileJava")
}

tasks.named('test') {
	useJUnitPlatform()
}